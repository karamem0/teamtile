on:
  push:
    branches:
      - main
      - develop

env:
  BUILD_VERSION: '2.1.4'

jobs:
  select-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Select environment from branch name
        id: select-environment
        shell: pwsh
        run: |
          if ("${{github.ref}}" -eq "refs/heads/main") {
            Write-Output "env-name=production" >> $env:GITHUB_OUTPUT
          }
          if ("${{github.ref}}" -eq "refs/heads/develop") {
            Write-Output "env-name=development" >> $env:GITHUB_OUTPUT
          }
    outputs:
      env-name: ${{steps.select-environment.outputs.env-name}}
  build-source:
    needs: select-environment
    runs-on: ubuntu-latest
    environment: ${{needs.select-environment.outputs.env-name}}
    steps:
      - name: Checkout repos
        uses: actions/checkout@v4
      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Update .env
        shell: pwsh
        run: |
          $content = Get-Content -Path ${{env.FILE_PATH}}
          $content = $content -replace "{{APP_CLIENT_ID}}", "${{secrets.APP_CLIENT_ID}}"
          $content = $content -replace "{{APP_TENANT_ID}}", "${{secrets.APP_TENANT_ID}}"
          $content = $content -replace "{{TELEMETRY_CONNECTION_STRING}}", "${{secrets.TELEMETRY_CONNECTION_STRING}}"
          Out-File -FilePath ${{env.FILE_PATH}} -InputObject $content -Encoding UTF8
        env:
          FILE_PATH: source/client/.env
      - name: Update package.json
        run: npm version ${{env.BUILD_VERSION}} --no-git-tag-version
        working-directory: source/client
      - name: Restore client
        run: npm ci
        working-directory: source/client
      - name: Audit client
        run: npm audit --omit=dev
        working-directory: source/client
      - name: Build client
        run: npm run build
        working-directory: source/client
      - name: Test client
        run: npm run test:ci
        working-directory: source/client
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - name: Restore server
        run: dotnet restore
        working-directory: source/server
      - name: Test server
        shell: pwsh
        run: |
          dotnet test `
            -p:AltCover=true `
            -- NUnit.TestOutputXml=${{github.workspace}}/source/server/test
        working-directory: source/server
      - name: Build server
        shell: pwsh
        run: |
          dotnet publish Karamem0.Teamtile/Karamem0.Teamtile.csproj `
            -c Release `
            -p:PublishDir=../build `
            -p:Version=${{env.BUILD_VERSION}}.${{github.run_number}} `
            -p:FileVersion=${{env.BUILD_VERSION}}.${{github.run_number}}
        working-directory: source/server
      - name: Upload build files
        uses: actions/upload-artifact@v4
        with:
          name: teamtile-build
          path: source/server/build
      - name: Upload test results
        uses: enricomi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          files: |
            source/client/test/**/*.xml
            source/server/test/**/*.xml
          check_name: test-results
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          fail_ci_if_error: true
          token: ${{secrets.CODECOV_TOKEN}}
  build-manifest:
    needs: select-environment
    runs-on: ubuntu-latest
    environment: ${{needs.select-environment.outputs.env-name}}
    steps:
      - name: Checkout repos
        uses: actions/checkout@v4
      - name: Update manifest.json
        shell: pwsh
        run: |
          $content = Get-Content -Path ${{env.FILE_PATH}}
          $content = $content -replace "{{APP_CLIENT_ID}}", "${{secrets.APP_CLIENT_ID}}"
          $content = $content -replace "{{APP_DOMAIN_NAME}}", "${{secrets.APP_DOMAIN_NAME}}"
          $content = $content -replace "{{APP_BUILD_VERSION}}", "${{env.BUILD_VERSION}}"
          Out-File -FilePath ${{env.FILE_PATH}} -InputObject $content -Encoding UTF8
        env:
          FILE_PATH: manifest/manifest.json
      - name: Upload manifest files
        uses: actions/upload-artifact@v4
        with:
          name: teamtile-manifest
          path: manifest
  deploy-source:
    needs:
      - select-environment
      - build-source
    runs-on: ubuntu-latest
    environment: ${{needs.select-environment.outputs.env-name}}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: teamtile-build
          path: build
      - name: Connect to Azure
        uses: azure/login@v2
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{secrets.APP_DEPLOYMENT_NAME}}
          package: build
